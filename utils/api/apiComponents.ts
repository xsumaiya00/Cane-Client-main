/**
 * Generated by @openapi-codegen
 *
 * @version 0.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

export type ActivitiesListError = Fetcher.ErrorWrapper<undefined>;

export type ActivitiesListResponse = Schemas.Activity[];

export type ActivitiesListVariables = ApiContext["fetcherOptions"];

export const fetchActivitiesList = (
  variables: ActivitiesListVariables,
  signal?: AbortSignal,
) =>
  apiFetch<ActivitiesListResponse, ActivitiesListError, undefined, {}, {}, {}>({
    url: "/api/activities/",
    method: "get",
    ...variables,
    signal,
  });

export const useActivitiesList = <TData = ActivitiesListResponse>(
  variables: ActivitiesListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ActivitiesListResponse,
      ActivitiesListError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    ActivitiesListResponse,
    ActivitiesListError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/activities/",
      operationId: "activitiesList",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchActivitiesList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ActivitiesCreateError = Fetcher.ErrorWrapper<undefined>;

export type ActivitiesCreateVariables = {
  body: Schemas.Activity;
} & ApiContext["fetcherOptions"];

export const fetchActivitiesCreate = (
  variables: ActivitiesCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Activity,
    ActivitiesCreateError,
    Schemas.Activity,
    {},
    {},
    {}
  >({ url: "/api/activities/", method: "post", ...variables, signal });

export const useActivitiesCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Activity,
      ActivitiesCreateError,
      ActivitiesCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Activity,
    ActivitiesCreateError,
    ActivitiesCreateVariables
  >({
    mutationFn: (variables: ActivitiesCreateVariables) =>
      fetchActivitiesCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActivitiesRetrievePathParams = {
  /**
   * A unique integer value identifying this activity.
   */
  id: number;
};

export type ActivitiesRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type ActivitiesRetrieveVariables = {
  pathParams: ActivitiesRetrievePathParams;
} & ApiContext["fetcherOptions"];

export const fetchActivitiesRetrieve = (
  variables: ActivitiesRetrieveVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Activity,
    ActivitiesRetrieveError,
    undefined,
    {},
    {},
    ActivitiesRetrievePathParams
  >({ url: "/api/activities/{id}/", method: "get", ...variables, signal });

export const useActivitiesRetrieve = <TData = Schemas.Activity>(
  variables: ActivitiesRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Activity,
      ActivitiesRetrieveError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.Activity, ActivitiesRetrieveError, TData>({
    queryKey: queryKeyFn({
      path: "/api/activities/{id}/",
      operationId: "activitiesRetrieve",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchActivitiesRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ActivitiesUpdatePathParams = {
  /**
   * A unique integer value identifying this activity.
   */
  id: number;
};

export type ActivitiesUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ActivitiesUpdateVariables = {
  body: Schemas.Activity;
  pathParams: ActivitiesUpdatePathParams;
} & ApiContext["fetcherOptions"];

export const fetchActivitiesUpdate = (
  variables: ActivitiesUpdateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Activity,
    ActivitiesUpdateError,
    Schemas.Activity,
    {},
    {},
    ActivitiesUpdatePathParams
  >({ url: "/api/activities/{id}/", method: "put", ...variables, signal });

export const useActivitiesUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Activity,
      ActivitiesUpdateError,
      ActivitiesUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Activity,
    ActivitiesUpdateError,
    ActivitiesUpdateVariables
  >({
    mutationFn: (variables: ActivitiesUpdateVariables) =>
      fetchActivitiesUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActivitiesPartialUpdatePathParams = {
  /**
   * A unique integer value identifying this activity.
   */
  id: number;
};

export type ActivitiesPartialUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ActivitiesPartialUpdateVariables = {
  body?: Schemas.PatchedActivity;
  pathParams: ActivitiesPartialUpdatePathParams;
} & ApiContext["fetcherOptions"];

export const fetchActivitiesPartialUpdate = (
  variables: ActivitiesPartialUpdateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Activity,
    ActivitiesPartialUpdateError,
    Schemas.PatchedActivity,
    {},
    {},
    ActivitiesPartialUpdatePathParams
  >({ url: "/api/activities/{id}/", method: "patch", ...variables, signal });

export const useActivitiesPartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Activity,
      ActivitiesPartialUpdateError,
      ActivitiesPartialUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Activity,
    ActivitiesPartialUpdateError,
    ActivitiesPartialUpdateVariables
  >({
    mutationFn: (variables: ActivitiesPartialUpdateVariables) =>
      fetchActivitiesPartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActivitiesDestroyPathParams = {
  /**
   * A unique integer value identifying this activity.
   */
  id: number;
};

export type ActivitiesDestroyError = Fetcher.ErrorWrapper<undefined>;

export type ActivitiesDestroyVariables = {
  pathParams: ActivitiesDestroyPathParams;
} & ApiContext["fetcherOptions"];

export const fetchActivitiesDestroy = (
  variables: ActivitiesDestroyVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    ActivitiesDestroyError,
    undefined,
    {},
    {},
    ActivitiesDestroyPathParams
  >({ url: "/api/activities/{id}/", method: "delete", ...variables, signal });

export const useActivitiesDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ActivitiesDestroyError,
      ActivitiesDestroyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    ActivitiesDestroyError,
    ActivitiesDestroyVariables
  >({
    mutationFn: (variables: ActivitiesDestroyVariables) =>
      fetchActivitiesDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ActivitiesWeeklyActivitiesRetrieveError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivitiesWeeklyActivitiesRetrieveVariables =
  ApiContext["fetcherOptions"];

export const fetchActivitiesWeeklyActivitiesRetrieve = (
  variables: ActivitiesWeeklyActivitiesRetrieveVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Activity,
    ActivitiesWeeklyActivitiesRetrieveError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/activities/weekly-activities/",
    method: "get",
    ...variables,
    signal,
  });

export const useActivitiesWeeklyActivitiesRetrieve = <TData = Schemas.Activity>(
  variables: ActivitiesWeeklyActivitiesRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Activity,
      ActivitiesWeeklyActivitiesRetrieveError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.Activity,
    ActivitiesWeeklyActivitiesRetrieveError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/activities/weekly-activities/",
      operationId: "activitiesWeeklyActivitiesRetrieve",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchActivitiesWeeklyActivitiesRetrieve(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ActivitiesWeeklyStatsRetrieveError =
  Fetcher.ErrorWrapper<undefined>;

export type ActivitiesWeeklyStatsRetrieveVariables =
  ApiContext["fetcherOptions"];

export const fetchActivitiesWeeklyStatsRetrieve = (
  variables: ActivitiesWeeklyStatsRetrieveVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Activity,
    ActivitiesWeeklyStatsRetrieveError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/activities/weekly-stats/",
    method: "get",
    ...variables,
    signal,
  });

export const useActivitiesWeeklyStatsRetrieve = <TData = Schemas.Activity>(
  variables: ActivitiesWeeklyStatsRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Activity,
      ActivitiesWeeklyStatsRetrieveError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.Activity,
    ActivitiesWeeklyStatsRetrieveError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/activities/weekly-stats/",
      operationId: "activitiesWeeklyStatsRetrieve",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchActivitiesWeeklyStatsRetrieve(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type AuthLoginCreateError = Fetcher.ErrorWrapper<undefined>;

export type AuthLoginCreateVariables = {
  body: Schemas.Login;
} & ApiContext["fetcherOptions"];

/**
 * Check the credentials and return the REST Token
 * if the credentials are valid and authenticated.
 * Calls Django Auth login method to register User ID
 * in Django session framework
 *
 * Accept the following POST parameters: username, password
 * Return the REST Framework Token Object's key.
 */
export const fetchAuthLoginCreate = (
  variables: AuthLoginCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.Token, AuthLoginCreateError, Schemas.Login, {}, {}, {}>({
    url: "/api/auth/login/",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Check the credentials and return the REST Token
 * if the credentials are valid and authenticated.
 * Calls Django Auth login method to register User ID
 * in Django session framework
 *
 * Accept the following POST parameters: username, password
 * Return the REST Framework Token Object's key.
 */
export const useAuthLoginCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Token,
      AuthLoginCreateError,
      AuthLoginCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Token,
    AuthLoginCreateError,
    AuthLoginCreateVariables
  >({
    mutationFn: (variables: AuthLoginCreateVariables) =>
      fetchAuthLoginCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AuthLogoutCreateError = Fetcher.ErrorWrapper<undefined>;

export type AuthLogoutCreateVariables = ApiContext["fetcherOptions"];

/**
 * Calls Django logout method and delete the Token object
 * assigned to the current User object.
 *
 * Accepts/Returns nothing.
 */
export const fetchAuthLogoutCreate = (
  variables: AuthLogoutCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.RestAuthDetail,
    AuthLogoutCreateError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/auth/logout/", method: "post", ...variables, signal });

/**
 * Calls Django logout method and delete the Token object
 * assigned to the current User object.
 *
 * Accepts/Returns nothing.
 */
export const useAuthLogoutCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestAuthDetail,
      AuthLogoutCreateError,
      AuthLogoutCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.RestAuthDetail,
    AuthLogoutCreateError,
    AuthLogoutCreateVariables
  >({
    mutationFn: (variables: AuthLogoutCreateVariables) =>
      fetchAuthLogoutCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AuthPasswordChangeCreateError = Fetcher.ErrorWrapper<undefined>;

export type AuthPasswordChangeCreateVariables = {
  body: Schemas.PasswordChange;
} & ApiContext["fetcherOptions"];

/**
 * Calls Django Auth SetPasswordForm save method.
 *
 * Accepts the following POST parameters: new_password1, new_password2
 * Returns the success/fail message.
 */
export const fetchAuthPasswordChangeCreate = (
  variables: AuthPasswordChangeCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.RestAuthDetail,
    AuthPasswordChangeCreateError,
    Schemas.PasswordChange,
    {},
    {},
    {}
  >({
    url: "/api/auth/password/change/",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Calls Django Auth SetPasswordForm save method.
 *
 * Accepts the following POST parameters: new_password1, new_password2
 * Returns the success/fail message.
 */
export const useAuthPasswordChangeCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestAuthDetail,
      AuthPasswordChangeCreateError,
      AuthPasswordChangeCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.RestAuthDetail,
    AuthPasswordChangeCreateError,
    AuthPasswordChangeCreateVariables
  >({
    mutationFn: (variables: AuthPasswordChangeCreateVariables) =>
      fetchAuthPasswordChangeCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AuthPasswordResetCreateError = Fetcher.ErrorWrapper<undefined>;

export type AuthPasswordResetCreateVariables = {
  body: Schemas.PasswordReset;
} & ApiContext["fetcherOptions"];

/**
 * Calls Django Auth PasswordResetForm save method.
 *
 * Accepts the following POST parameters: email
 * Returns the success/fail message.
 */
export const fetchAuthPasswordResetCreate = (
  variables: AuthPasswordResetCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.RestAuthDetail,
    AuthPasswordResetCreateError,
    Schemas.PasswordReset,
    {},
    {},
    {}
  >({ url: "/api/auth/password/reset/", method: "post", ...variables, signal });

/**
 * Calls Django Auth PasswordResetForm save method.
 *
 * Accepts the following POST parameters: email
 * Returns the success/fail message.
 */
export const useAuthPasswordResetCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestAuthDetail,
      AuthPasswordResetCreateError,
      AuthPasswordResetCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.RestAuthDetail,
    AuthPasswordResetCreateError,
    AuthPasswordResetCreateVariables
  >({
    mutationFn: (variables: AuthPasswordResetCreateVariables) =>
      fetchAuthPasswordResetCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AuthPasswordResetConfirmCreateError =
  Fetcher.ErrorWrapper<undefined>;

export type AuthPasswordResetConfirmCreateVariables = {
  body: Schemas.PasswordResetConfirm;
} & ApiContext["fetcherOptions"];

/**
 * Password reset e-mail link is confirmed, therefore
 * this resets the user's password.
 *
 * Accepts the following POST parameters: token, uid,
 *     new_password1, new_password2
 * Returns the success/fail message.
 */
export const fetchAuthPasswordResetConfirmCreate = (
  variables: AuthPasswordResetConfirmCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.RestAuthDetail,
    AuthPasswordResetConfirmCreateError,
    Schemas.PasswordResetConfirm,
    {},
    {},
    {}
  >({
    url: "/api/auth/password/reset/confirm/",
    method: "post",
    ...variables,
    signal,
  });

/**
 * Password reset e-mail link is confirmed, therefore
 * this resets the user's password.
 *
 * Accepts the following POST parameters: token, uid,
 *     new_password1, new_password2
 * Returns the success/fail message.
 */
export const useAuthPasswordResetConfirmCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestAuthDetail,
      AuthPasswordResetConfirmCreateError,
      AuthPasswordResetConfirmCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.RestAuthDetail,
    AuthPasswordResetConfirmCreateError,
    AuthPasswordResetConfirmCreateVariables
  >({
    mutationFn: (variables: AuthPasswordResetConfirmCreateVariables) =>
      fetchAuthPasswordResetConfirmCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AuthRegistrationCreateError = Fetcher.ErrorWrapper<undefined>;

export type AuthRegistrationCreateVariables = {
  body: Schemas.Register;
} & ApiContext["fetcherOptions"];

export const fetchAuthRegistrationCreate = (
  variables: AuthRegistrationCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Token,
    AuthRegistrationCreateError,
    Schemas.Register,
    {},
    {},
    {}
  >({ url: "/api/auth/registration/", method: "post", ...variables, signal });

export const useAuthRegistrationCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Token,
      AuthRegistrationCreateError,
      AuthRegistrationCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Token,
    AuthRegistrationCreateError,
    AuthRegistrationCreateVariables
  >({
    mutationFn: (variables: AuthRegistrationCreateVariables) =>
      fetchAuthRegistrationCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AuthRegistrationResendEmailCreateError =
  Fetcher.ErrorWrapper<undefined>;

export type AuthRegistrationResendEmailCreateVariables = {
  body: Schemas.ResendEmailVerification;
} & ApiContext["fetcherOptions"];

export const fetchAuthRegistrationResendEmailCreate = (
  variables: AuthRegistrationResendEmailCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.RestAuthDetail,
    AuthRegistrationResendEmailCreateError,
    Schemas.ResendEmailVerification,
    {},
    {},
    {}
  >({
    url: "/api/auth/registration/resend-email/",
    method: "post",
    ...variables,
    signal,
  });

export const useAuthRegistrationResendEmailCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestAuthDetail,
      AuthRegistrationResendEmailCreateError,
      AuthRegistrationResendEmailCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.RestAuthDetail,
    AuthRegistrationResendEmailCreateError,
    AuthRegistrationResendEmailCreateVariables
  >({
    mutationFn: (variables: AuthRegistrationResendEmailCreateVariables) =>
      fetchAuthRegistrationResendEmailCreate({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type AuthRegistrationVerifyEmailCreateError =
  Fetcher.ErrorWrapper<undefined>;

export type AuthRegistrationVerifyEmailCreateVariables = {
  body: Schemas.VerifyEmail;
} & ApiContext["fetcherOptions"];

export const fetchAuthRegistrationVerifyEmailCreate = (
  variables: AuthRegistrationVerifyEmailCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.RestAuthDetail,
    AuthRegistrationVerifyEmailCreateError,
    Schemas.VerifyEmail,
    {},
    {},
    {}
  >({
    url: "/api/auth/registration/verify-email/",
    method: "post",
    ...variables,
    signal,
  });

export const useAuthRegistrationVerifyEmailCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.RestAuthDetail,
      AuthRegistrationVerifyEmailCreateError,
      AuthRegistrationVerifyEmailCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.RestAuthDetail,
    AuthRegistrationVerifyEmailCreateError,
    AuthRegistrationVerifyEmailCreateVariables
  >({
    mutationFn: (variables: AuthRegistrationVerifyEmailCreateVariables) =>
      fetchAuthRegistrationVerifyEmailCreate({
        ...fetcherOptions,
        ...variables,
      }),
    ...options,
  });
};

export type AuthUserRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type AuthUserRetrieveVariables = ApiContext["fetcherOptions"];

/**
 * Reads and updates UserModel fields
 * Accepts GET, PUT, PATCH methods.
 *
 * Default accepted fields: username, first_name, last_name
 * Default display fields: pk, username, email, first_name, last_name
 * Read-only fields: pk, email
 *
 * Returns UserModel fields.
 */
export const fetchAuthUserRetrieve = (
  variables: AuthUserRetrieveVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.UserDetails, AuthUserRetrieveError, undefined, {}, {}, {}>({
    url: "/api/auth/user/",
    method: "get",
    ...variables,
    signal,
  });

/**
 * Reads and updates UserModel fields
 * Accepts GET, PUT, PATCH methods.
 *
 * Default accepted fields: username, first_name, last_name
 * Default display fields: pk, username, email, first_name, last_name
 * Read-only fields: pk, email
 *
 * Returns UserModel fields.
 */
export const useAuthUserRetrieve = <TData = Schemas.UserDetails>(
  variables: AuthUserRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UserDetails,
      AuthUserRetrieveError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.UserDetails, AuthUserRetrieveError, TData>(
    {
      queryKey: queryKeyFn({
        path: "/api/auth/user/",
        operationId: "authUserRetrieve",
        variables,
      }),
      queryFn: ({ signal }) =>
        fetchAuthUserRetrieve({ ...fetcherOptions, ...variables }, signal),
      ...options,
      ...queryOptions,
    },
  );
};

export type AuthUserUpdateError = Fetcher.ErrorWrapper<undefined>;

export type AuthUserUpdateVariables = {
  body: Schemas.UserDetails;
} & ApiContext["fetcherOptions"];

/**
 * Reads and updates UserModel fields
 * Accepts GET, PUT, PATCH methods.
 *
 * Default accepted fields: username, first_name, last_name
 * Default display fields: pk, username, email, first_name, last_name
 * Read-only fields: pk, email
 *
 * Returns UserModel fields.
 */
export const fetchAuthUserUpdate = (
  variables: AuthUserUpdateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UserDetails,
    AuthUserUpdateError,
    Schemas.UserDetails,
    {},
    {},
    {}
  >({ url: "/api/auth/user/", method: "put", ...variables, signal });

/**
 * Reads and updates UserModel fields
 * Accepts GET, PUT, PATCH methods.
 *
 * Default accepted fields: username, first_name, last_name
 * Default display fields: pk, username, email, first_name, last_name
 * Read-only fields: pk, email
 *
 * Returns UserModel fields.
 */
export const useAuthUserUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UserDetails,
      AuthUserUpdateError,
      AuthUserUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.UserDetails,
    AuthUserUpdateError,
    AuthUserUpdateVariables
  >({
    mutationFn: (variables: AuthUserUpdateVariables) =>
      fetchAuthUserUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AuthUserPartialUpdateError = Fetcher.ErrorWrapper<undefined>;

export type AuthUserPartialUpdateVariables = {
  body?: Schemas.PatchedUserDetails;
} & ApiContext["fetcherOptions"];

/**
 * Reads and updates UserModel fields
 * Accepts GET, PUT, PATCH methods.
 *
 * Default accepted fields: username, first_name, last_name
 * Default display fields: pk, username, email, first_name, last_name
 * Read-only fields: pk, email
 *
 * Returns UserModel fields.
 */
export const fetchAuthUserPartialUpdate = (
  variables: AuthUserPartialUpdateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UserDetails,
    AuthUserPartialUpdateError,
    Schemas.PatchedUserDetails,
    {},
    {},
    {}
  >({ url: "/api/auth/user/", method: "patch", ...variables, signal });

/**
 * Reads and updates UserModel fields
 * Accepts GET, PUT, PATCH methods.
 *
 * Default accepted fields: username, first_name, last_name
 * Default display fields: pk, username, email, first_name, last_name
 * Read-only fields: pk, email
 *
 * Returns UserModel fields.
 */
export const useAuthUserPartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UserDetails,
      AuthUserPartialUpdateError,
      AuthUserPartialUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.UserDetails,
    AuthUserPartialUpdateError,
    AuthUserPartialUpdateVariables
  >({
    mutationFn: (variables: AuthUserPartialUpdateVariables) =>
      fetchAuthUserPartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ModulesListError = Fetcher.ErrorWrapper<undefined>;

export type ModulesListResponse = Schemas.Module[];

export type ModulesListVariables = ApiContext["fetcherOptions"];

export const fetchModulesList = (
  variables: ModulesListVariables,
  signal?: AbortSignal,
) =>
  apiFetch<ModulesListResponse, ModulesListError, undefined, {}, {}, {}>({
    url: "/api/modules/",
    method: "get",
    ...variables,
    signal,
  });

export const useModulesList = <TData = ModulesListResponse>(
  variables: ModulesListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<ModulesListResponse, ModulesListError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<ModulesListResponse, ModulesListError, TData>({
    queryKey: queryKeyFn({
      path: "/api/modules/",
      operationId: "modulesList",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchModulesList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ModulesCreateError = Fetcher.ErrorWrapper<undefined>;

export type ModulesCreateVariables = {
  body: Schemas.Module;
} & ApiContext["fetcherOptions"];

export const fetchModulesCreate = (
  variables: ModulesCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.Module, ModulesCreateError, Schemas.Module, {}, {}, {}>({
    url: "/api/modules/",
    method: "post",
    ...variables,
    signal,
  });

export const useModulesCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Module,
      ModulesCreateError,
      ModulesCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Module,
    ModulesCreateError,
    ModulesCreateVariables
  >({
    mutationFn: (variables: ModulesCreateVariables) =>
      fetchModulesCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ModulesRetrievePathParams = {
  /**
   * A unique integer value identifying this module.
   */
  id: number;
};

export type ModulesRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type ModulesRetrieveVariables = {
  pathParams: ModulesRetrievePathParams;
} & ApiContext["fetcherOptions"];

export const fetchModulesRetrieve = (
  variables: ModulesRetrieveVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Module,
    ModulesRetrieveError,
    undefined,
    {},
    {},
    ModulesRetrievePathParams
  >({ url: "/api/modules/{id}/", method: "get", ...variables, signal });

export const useModulesRetrieve = <TData = Schemas.Module>(
  variables: ModulesRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Module, ModulesRetrieveError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.Module, ModulesRetrieveError, TData>({
    queryKey: queryKeyFn({
      path: "/api/modules/{id}/",
      operationId: "modulesRetrieve",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchModulesRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type ModulesUpdatePathParams = {
  /**
   * A unique integer value identifying this module.
   */
  id: number;
};

export type ModulesUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ModulesUpdateVariables = {
  body: Schemas.Module;
  pathParams: ModulesUpdatePathParams;
} & ApiContext["fetcherOptions"];

export const fetchModulesUpdate = (
  variables: ModulesUpdateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Module,
    ModulesUpdateError,
    Schemas.Module,
    {},
    {},
    ModulesUpdatePathParams
  >({ url: "/api/modules/{id}/", method: "put", ...variables, signal });

export const useModulesUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Module,
      ModulesUpdateError,
      ModulesUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Module,
    ModulesUpdateError,
    ModulesUpdateVariables
  >({
    mutationFn: (variables: ModulesUpdateVariables) =>
      fetchModulesUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ModulesPartialUpdatePathParams = {
  /**
   * A unique integer value identifying this module.
   */
  id: number;
};

export type ModulesPartialUpdateError = Fetcher.ErrorWrapper<undefined>;

export type ModulesPartialUpdateVariables = {
  body?: Schemas.PatchedModule;
  pathParams: ModulesPartialUpdatePathParams;
} & ApiContext["fetcherOptions"];

export const fetchModulesPartialUpdate = (
  variables: ModulesPartialUpdateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Module,
    ModulesPartialUpdateError,
    Schemas.PatchedModule,
    {},
    {},
    ModulesPartialUpdatePathParams
  >({ url: "/api/modules/{id}/", method: "patch", ...variables, signal });

export const useModulesPartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Module,
      ModulesPartialUpdateError,
      ModulesPartialUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Module,
    ModulesPartialUpdateError,
    ModulesPartialUpdateVariables
  >({
    mutationFn: (variables: ModulesPartialUpdateVariables) =>
      fetchModulesPartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ModulesDestroyPathParams = {
  /**
   * A unique integer value identifying this module.
   */
  id: number;
};

export type ModulesDestroyError = Fetcher.ErrorWrapper<undefined>;

export type ModulesDestroyVariables = {
  pathParams: ModulesDestroyPathParams;
} & ApiContext["fetcherOptions"];

export const fetchModulesDestroy = (
  variables: ModulesDestroyVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    ModulesDestroyError,
    undefined,
    {},
    {},
    ModulesDestroyPathParams
  >({ url: "/api/modules/{id}/", method: "delete", ...variables, signal });

export const useModulesDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      ModulesDestroyError,
      ModulesDestroyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    ModulesDestroyError,
    ModulesDestroyVariables
  >({
    mutationFn: (variables: ModulesDestroyVariables) =>
      fetchModulesDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type ModulesBySlugRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type ModulesBySlugRetrieveVariables = ApiContext["fetcherOptions"];

export const fetchModulesBySlugRetrieve = (
  variables: ModulesBySlugRetrieveVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.Module, ModulesBySlugRetrieveError, undefined, {}, {}, {}>({
    url: "/api/modules/by-slug/",
    method: "get",
    ...variables,
    signal,
  });

export const useModulesBySlugRetrieve = <TData = Schemas.Module>(
  variables: ModulesBySlugRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Module,
      ModulesBySlugRetrieveError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.Module, ModulesBySlugRetrieveError, TData>(
    {
      queryKey: queryKeyFn({
        path: "/api/modules/by-slug/",
        operationId: "modulesBySlugRetrieve",
        variables,
      }),
      queryFn: ({ signal }) =>
        fetchModulesBySlugRetrieve({ ...fetcherOptions, ...variables }, signal),
      ...options,
      ...queryOptions,
    },
  );
};

export type PredictHrtaCreateError = Fetcher.ErrorWrapper<undefined>;

export type PredictHrtaCreateVariables = {
  body: Schemas.HRTPredictionRequest;
} & ApiContext["fetcherOptions"];

export const fetchPredictHrtaCreate = (
  variables: PredictHrtaCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.HRTPredictionRequest,
    PredictHrtaCreateError,
    Schemas.HRTPredictionRequest,
    {},
    {},
    {}
  >({ url: "/api/predict/hrta", method: "post", ...variables, signal });

export const usePredictHrtaCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.HRTPredictionRequest,
      PredictHrtaCreateError,
      PredictHrtaCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.HRTPredictionRequest,
    PredictHrtaCreateError,
    PredictHrtaCreateVariables
  >({
    mutationFn: (variables: PredictHrtaCreateVariables) =>
      fetchPredictHrtaCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PredictHrtdCreateError = Fetcher.ErrorWrapper<undefined>;

export type PredictHrtdCreateVariables = {
  body: Schemas.HRTPredictionRequest;
} & ApiContext["fetcherOptions"];

export const fetchPredictHrtdCreate = (
  variables: PredictHrtdCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.HRTPredictionRequest,
    PredictHrtdCreateError,
    Schemas.HRTPredictionRequest,
    {},
    {},
    {}
  >({ url: "/api/predict/hrtd", method: "post", ...variables, signal });

export const usePredictHrtdCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.HRTPredictionRequest,
      PredictHrtdCreateError,
      PredictHrtdCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.HRTPredictionRequest,
    PredictHrtdCreateError,
    PredictHrtdCreateVariables
  >({
    mutationFn: (variables: PredictHrtdCreateVariables) =>
      fetchPredictHrtdCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PredictHrtsCreateError = Fetcher.ErrorWrapper<undefined>;

export type PredictHrtsCreateVariables = {
  body: Schemas.HRTPredictionRequest;
} & ApiContext["fetcherOptions"];

export const fetchPredictHrtsCreate = (
  variables: PredictHrtsCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.HRTPredictionRequest,
    PredictHrtsCreateError,
    Schemas.HRTPredictionRequest,
    {},
    {},
    {}
  >({ url: "/api/predict/hrts", method: "post", ...variables, signal });

export const usePredictHrtsCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.HRTPredictionRequest,
      PredictHrtsCreateError,
      PredictHrtsCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.HRTPredictionRequest,
    PredictHrtsCreateError,
    PredictHrtsCreateVariables
  >({
    mutationFn: (variables: PredictHrtsCreateVariables) =>
      fetchPredictHrtsCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PredictIerCreateError = Fetcher.ErrorWrapper<undefined>;

export type PredictIerCreateVariables = {
  body: Schemas.IERPredictionRequest;
} & ApiContext["fetcherOptions"];

export const fetchPredictIerCreate = (
  variables: PredictIerCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.IERPredictionRequest,
    PredictIerCreateError,
    Schemas.IERPredictionRequest,
    {},
    {},
    {}
  >({ url: "/api/predict/ier", method: "post", ...variables, signal });

export const usePredictIerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.IERPredictionRequest,
      PredictIerCreateError,
      PredictIerCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.IERPredictionRequest,
    PredictIerCreateError,
    PredictIerCreateVariables
  >({
    mutationFn: (variables: PredictIerCreateVariables) =>
      fetchPredictIerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PredictSerCreateError = Fetcher.ErrorWrapper<undefined>;

export type PredictSerCreateVariables = {
  body: Schemas.SERPredictionRequest;
} & ApiContext["fetcherOptions"];

export const fetchPredictSerCreate = (
  variables: PredictSerCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.SERPredictionRequest,
    PredictSerCreateError,
    Schemas.SERPredictionRequest,
    {},
    {},
    {}
  >({ url: "/api/predict/ser", method: "post", ...variables, signal });

export const usePredictSerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.SERPredictionRequest,
      PredictSerCreateError,
      PredictSerCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.SERPredictionRequest,
    PredictSerCreateError,
    PredictSerCreateVariables
  >({
    mutationFn: (variables: PredictSerCreateVariables) =>
      fetchPredictSerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type PredictTerCreateError = Fetcher.ErrorWrapper<undefined>;

export type PredictTerCreateVariables = {
  body: Schemas.TERPredictionRequest;
} & ApiContext["fetcherOptions"];

export const fetchPredictTerCreate = (
  variables: PredictTerCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.TERPredictionRequest,
    PredictTerCreateError,
    Schemas.TERPredictionRequest,
    {},
    {},
    {}
  >({ url: "/api/predict/ter", method: "post", ...variables, signal });

export const usePredictTerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TERPredictionRequest,
      PredictTerCreateError,
      PredictTerCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TERPredictionRequest,
    PredictTerCreateError,
    PredictTerCreateVariables
  >({
    mutationFn: (variables: PredictTerCreateVariables) =>
      fetchPredictTerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type QuestionsListError = Fetcher.ErrorWrapper<undefined>;

export type QuestionsListResponse = Schemas.Question[];

export type QuestionsListVariables = ApiContext["fetcherOptions"];

export const fetchQuestionsList = (
  variables: QuestionsListVariables,
  signal?: AbortSignal,
) =>
  apiFetch<QuestionsListResponse, QuestionsListError, undefined, {}, {}, {}>({
    url: "/api/questions/",
    method: "get",
    ...variables,
    signal,
  });

export const useQuestionsList = <TData = QuestionsListResponse>(
  variables: QuestionsListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      QuestionsListResponse,
      QuestionsListError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<QuestionsListResponse, QuestionsListError, TData>({
    queryKey: queryKeyFn({
      path: "/api/questions/",
      operationId: "questionsList",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchQuestionsList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QuestionsCreateError = Fetcher.ErrorWrapper<undefined>;

export type QuestionsCreateVariables = {
  body: Schemas.QuestionCreateUpdate;
} & ApiContext["fetcherOptions"];

export const fetchQuestionsCreate = (
  variables: QuestionsCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.QuestionCreateUpdate,
    QuestionsCreateError,
    Schemas.QuestionCreateUpdate,
    {},
    {},
    {}
  >({ url: "/api/questions/", method: "post", ...variables, signal });

export const useQuestionsCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.QuestionCreateUpdate,
      QuestionsCreateError,
      QuestionsCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.QuestionCreateUpdate,
    QuestionsCreateError,
    QuestionsCreateVariables
  >({
    mutationFn: (variables: QuestionsCreateVariables) =>
      fetchQuestionsCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type QuestionsRetrievePathParams = {
  /**
   * A unique integer value identifying this question.
   */
  id: number;
};

export type QuestionsRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type QuestionsRetrieveVariables = {
  pathParams: QuestionsRetrievePathParams;
} & ApiContext["fetcherOptions"];

export const fetchQuestionsRetrieve = (
  variables: QuestionsRetrieveVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Question,
    QuestionsRetrieveError,
    undefined,
    {},
    {},
    QuestionsRetrievePathParams
  >({ url: "/api/questions/{id}/", method: "get", ...variables, signal });

export const useQuestionsRetrieve = <TData = Schemas.Question>(
  variables: QuestionsRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Question, QuestionsRetrieveError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.Question, QuestionsRetrieveError, TData>({
    queryKey: queryKeyFn({
      path: "/api/questions/{id}/",
      operationId: "questionsRetrieve",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchQuestionsRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QuestionsUpdatePathParams = {
  /**
   * A unique integer value identifying this question.
   */
  id: number;
};

export type QuestionsUpdateError = Fetcher.ErrorWrapper<undefined>;

export type QuestionsUpdateVariables = {
  body: Schemas.QuestionCreateUpdate;
  pathParams: QuestionsUpdatePathParams;
} & ApiContext["fetcherOptions"];

export const fetchQuestionsUpdate = (
  variables: QuestionsUpdateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.QuestionCreateUpdate,
    QuestionsUpdateError,
    Schemas.QuestionCreateUpdate,
    {},
    {},
    QuestionsUpdatePathParams
  >({ url: "/api/questions/{id}/", method: "put", ...variables, signal });

export const useQuestionsUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.QuestionCreateUpdate,
      QuestionsUpdateError,
      QuestionsUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.QuestionCreateUpdate,
    QuestionsUpdateError,
    QuestionsUpdateVariables
  >({
    mutationFn: (variables: QuestionsUpdateVariables) =>
      fetchQuestionsUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type QuestionsPartialUpdatePathParams = {
  /**
   * A unique integer value identifying this question.
   */
  id: number;
};

export type QuestionsPartialUpdateError = Fetcher.ErrorWrapper<undefined>;

export type QuestionsPartialUpdateVariables = {
  body?: Schemas.PatchedQuestionCreateUpdate;
  pathParams: QuestionsPartialUpdatePathParams;
} & ApiContext["fetcherOptions"];

export const fetchQuestionsPartialUpdate = (
  variables: QuestionsPartialUpdateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.QuestionCreateUpdate,
    QuestionsPartialUpdateError,
    Schemas.PatchedQuestionCreateUpdate,
    {},
    {},
    QuestionsPartialUpdatePathParams
  >({ url: "/api/questions/{id}/", method: "patch", ...variables, signal });

export const useQuestionsPartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.QuestionCreateUpdate,
      QuestionsPartialUpdateError,
      QuestionsPartialUpdateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.QuestionCreateUpdate,
    QuestionsPartialUpdateError,
    QuestionsPartialUpdateVariables
  >({
    mutationFn: (variables: QuestionsPartialUpdateVariables) =>
      fetchQuestionsPartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type QuestionsDestroyPathParams = {
  /**
   * A unique integer value identifying this question.
   */
  id: number;
};

export type QuestionsDestroyError = Fetcher.ErrorWrapper<undefined>;

export type QuestionsDestroyVariables = {
  pathParams: QuestionsDestroyPathParams;
} & ApiContext["fetcherOptions"];

export const fetchQuestionsDestroy = (
  variables: QuestionsDestroyVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    QuestionsDestroyError,
    undefined,
    {},
    {},
    QuestionsDestroyPathParams
  >({ url: "/api/questions/{id}/", method: "delete", ...variables, signal });

export const useQuestionsDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      QuestionsDestroyError,
      QuestionsDestroyVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    QuestionsDestroyError,
    QuestionsDestroyVariables
  >({
    mutationFn: (variables: QuestionsDestroyVariables) =>
      fetchQuestionsDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type QuestionsBySlugRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type QuestionsBySlugRetrieveVariables = ApiContext["fetcherOptions"];

export const fetchQuestionsBySlugRetrieve = (
  variables: QuestionsBySlugRetrieveVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.Question,
    QuestionsBySlugRetrieveError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/questions/by-slug/", method: "get", ...variables, signal });

export const useQuestionsBySlugRetrieve = <TData = Schemas.Question>(
  variables: QuestionsBySlugRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.Question,
      QuestionsBySlugRetrieveError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.Question,
    QuestionsBySlugRetrieveError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/questions/by-slug/",
      operationId: "questionsBySlugRetrieve",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchQuestionsBySlugRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type SaveActivityCreateError = Fetcher.ErrorWrapper<undefined>;

export type SaveActivityCreateVariables = {
  body: Schemas.BaseActivity;
} & ApiContext["fetcherOptions"];

export const fetchSaveActivityCreate = (
  variables: SaveActivityCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.BaseActivity,
    SaveActivityCreateError,
    Schemas.BaseActivity,
    {},
    {},
    {}
  >({ url: "/api/save_activity", method: "post", ...variables, signal });

export const useSaveActivityCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.BaseActivity,
      SaveActivityCreateError,
      SaveActivityCreateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.BaseActivity,
    SaveActivityCreateError,
    SaveActivityCreateVariables
  >({
    mutationFn: (variables: SaveActivityCreateVariables) =>
      fetchSaveActivityCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type QueryOperation =
  | {
      path: "/api/activities/";
      operationId: "activitiesList";
      variables: ActivitiesListVariables;
    }
  | {
      path: "/api/activities/{id}/";
      operationId: "activitiesRetrieve";
      variables: ActivitiesRetrieveVariables;
    }
  | {
      path: "/api/activities/weekly-activities/";
      operationId: "activitiesWeeklyActivitiesRetrieve";
      variables: ActivitiesWeeklyActivitiesRetrieveVariables;
    }
  | {
      path: "/api/activities/weekly-stats/";
      operationId: "activitiesWeeklyStatsRetrieve";
      variables: ActivitiesWeeklyStatsRetrieveVariables;
    }
  | {
      path: "/api/auth/user/";
      operationId: "authUserRetrieve";
      variables: AuthUserRetrieveVariables;
    }
  | {
      path: "/api/modules/";
      operationId: "modulesList";
      variables: ModulesListVariables;
    }
  | {
      path: "/api/modules/{id}/";
      operationId: "modulesRetrieve";
      variables: ModulesRetrieveVariables;
    }
  | {
      path: "/api/modules/by-slug/";
      operationId: "modulesBySlugRetrieve";
      variables: ModulesBySlugRetrieveVariables;
    }
  | {
      path: "/api/questions/";
      operationId: "questionsList";
      variables: QuestionsListVariables;
    }
  | {
      path: "/api/questions/{id}/";
      operationId: "questionsRetrieve";
      variables: QuestionsRetrieveVariables;
    }
  | {
      path: "/api/questions/by-slug/";
      operationId: "questionsBySlugRetrieve";
      variables: QuestionsBySlugRetrieveVariables;
    };
